<?php
/**
 * LinkIdentityRequestDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Hapi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
* HAPI data model
 *
* No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
* OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.4
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Hapi\Model;

use \ArrayAccess;
use \Hapi\ObjectSerializer;

/**
 * LinkIdentityRequestDto Class Doc Comment
 *
 * @category Class
 * @package  Hapi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LinkIdentityRequestDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LinkIdentityRequestDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'linked_system_type' => 'string',
'linked_system_id' => 'string',
'linked_object_id' => 'string',
'linked_object_info' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'linked_system_type' => null,
'linked_system_id' => null,
'linked_object_id' => null,
'linked_object_info' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'linked_system_type' => 'linkedSystemType',
'linked_system_id' => 'linkedSystemId',
'linked_object_id' => 'linkedObjectId',
'linked_object_info' => 'linkedObjectInfo'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'linked_system_type' => 'setLinkedSystemType',
'linked_system_id' => 'setLinkedSystemId',
'linked_object_id' => 'setLinkedObjectId',
'linked_object_info' => 'setLinkedObjectInfo'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'linked_system_type' => 'getLinkedSystemType',
'linked_system_id' => 'getLinkedSystemId',
'linked_object_id' => 'getLinkedObjectId',
'linked_object_info' => 'getLinkedObjectInfo'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['linked_system_type'] = isset($data['linked_system_type']) ? $data['linked_system_type'] : null;
        $this->container['linked_system_id'] = isset($data['linked_system_id']) ? $data['linked_system_id'] : null;
        $this->container['linked_object_id'] = isset($data['linked_object_id']) ? $data['linked_object_id'] : null;
        $this->container['linked_object_info'] = isset($data['linked_object_info']) ? $data['linked_object_info'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['linked_system_type'] === null) {
            $invalidProperties[] = "'linked_system_type' can't be null";
        }
        if ($this->container['linked_object_id'] === null) {
            $invalidProperties[] = "'linked_object_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id'] === null) {
            return false;
        }
        if ($this->container['linked_system_type'] === null) {
            return false;
        }
        if ($this->container['linked_object_id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id guid of object to which link will be created
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets linked_system_type
     *
     * @return string
     */
    public function getLinkedSystemType()
    {
        return $this->container['linked_system_type'];
    }

    /**
     * Sets linked_system_type
     *
     * @param string $linked_system_type Type of system, to which link belongs to. For example, SALESFORCE
     *
     * @return $this
     */
    public function setLinkedSystemType($linked_system_type)
    {
        $this->container['linked_system_type'] = $linked_system_type;

        return $this;
    }

    /**
     * Gets linked_system_id
     *
     * @return string
     */
    public function getLinkedSystemId()
    {
        return $this->container['linked_system_id'];
    }

    /**
     * Sets linked_system_id
     *
     * @param string $linked_system_id Unique identifier of system, to which link belongs to
     *
     * @return $this
     */
    public function setLinkedSystemId($linked_system_id)
    {
        $this->container['linked_system_id'] = $linked_system_id;

        return $this;
    }

    /**
     * Gets linked_object_id
     *
     * @return string
     */
    public function getLinkedObjectId()
    {
        return $this->container['linked_object_id'];
    }

    /**
     * Sets linked_object_id
     *
     * @param string $linked_object_id Id of object in external system
     *
     * @return $this
     */
    public function setLinkedObjectId($linked_object_id)
    {
        $this->container['linked_object_id'] = $linked_object_id;

        return $this;
    }

    /**
     * Gets linked_object_info
     *
     * @return string
     */
    public function getLinkedObjectInfo()
    {
        return $this->container['linked_object_info'];
    }

    /**
     * Sets linked_object_info
     *
     * @param string $linked_object_info Additional information about object in external system in json format
     *
     * @return $this
     */
    public function setLinkedObjectInfo($linked_object_info)
    {
        $this->container['linked_object_info'] = $linked_object_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
