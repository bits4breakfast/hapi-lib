<?php
/**
 * AllotmentDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Hapi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
* HAPI data model
 *
* No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
* OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.4
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Hapi\Model;

use \ArrayAccess;
use \Hapi\ObjectSerializer;

/**
 * AllotmentDto Class Doc Comment
 *
 * @category Class
 * @package  Hapi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AllotmentDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AllotmentDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'resort_allotment_id' => 'string',
'hotel' => '\Hapi\Model\HotelDto',
'block_status' => 'string',
'block_name' => 'string',
'block_code' => 'string',
'effective_date' => 'string',
'expire_date' => 'string',
'rate_plan_code' => 'string',
'market' => '\Hapi\Model\MarketDto',
'source_code' => 'string',
'channel_code' => 'string',
'inventory_blocks' => '\Hapi\Model\InventoryBlockDto[]',
'notes' => '\Hapi\Model\CommentDto[]',
'catering_block' => 'string',
'booking_status' => 'string',
'profiles' => '\Hapi\Model\ProfileReferenceDto[]',
'owner' => 'string',
'packages' => 'string[]',
'block_type' => 'string',
'reservation_type' => 'string',
'booking_method' => 'string',
'repository_record_created' => '\DateTime',
'repository_record_updated' => '\DateTime'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'resort_allotment_id' => null,
'hotel' => null,
'block_status' => null,
'block_name' => null,
'block_code' => null,
'effective_date' => null,
'expire_date' => null,
'rate_plan_code' => null,
'market' => null,
'source_code' => null,
'channel_code' => null,
'inventory_blocks' => null,
'notes' => null,
'catering_block' => null,
'booking_status' => null,
'profiles' => null,
'owner' => null,
'packages' => null,
'block_type' => null,
'reservation_type' => null,
'booking_method' => null,
'repository_record_created' => 'date-time',
'repository_record_updated' => 'date-time'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'resort_allotment_id' => 'resortAllotmentId',
'hotel' => 'hotel',
'block_status' => 'blockStatus',
'block_name' => 'blockName',
'block_code' => 'blockCode',
'effective_date' => 'effectiveDate',
'expire_date' => 'expireDate',
'rate_plan_code' => 'ratePlanCode',
'market' => 'market',
'source_code' => 'sourceCode',
'channel_code' => 'channelCode',
'inventory_blocks' => 'inventoryBlocks',
'notes' => 'notes',
'catering_block' => 'cateringBlock',
'booking_status' => 'bookingStatus',
'profiles' => 'profiles',
'owner' => 'owner',
'packages' => 'packages',
'block_type' => 'blockType',
'reservation_type' => 'reservationType',
'booking_method' => 'bookingMethod',
'repository_record_created' => 'repositoryRecordCreated',
'repository_record_updated' => 'repositoryRecordUpdated'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'resort_allotment_id' => 'setResortAllotmentId',
'hotel' => 'setHotel',
'block_status' => 'setBlockStatus',
'block_name' => 'setBlockName',
'block_code' => 'setBlockCode',
'effective_date' => 'setEffectiveDate',
'expire_date' => 'setExpireDate',
'rate_plan_code' => 'setRatePlanCode',
'market' => 'setMarket',
'source_code' => 'setSourceCode',
'channel_code' => 'setChannelCode',
'inventory_blocks' => 'setInventoryBlocks',
'notes' => 'setNotes',
'catering_block' => 'setCateringBlock',
'booking_status' => 'setBookingStatus',
'profiles' => 'setProfiles',
'owner' => 'setOwner',
'packages' => 'setPackages',
'block_type' => 'setBlockType',
'reservation_type' => 'setReservationType',
'booking_method' => 'setBookingMethod',
'repository_record_created' => 'setRepositoryRecordCreated',
'repository_record_updated' => 'setRepositoryRecordUpdated'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'resort_allotment_id' => 'getResortAllotmentId',
'hotel' => 'getHotel',
'block_status' => 'getBlockStatus',
'block_name' => 'getBlockName',
'block_code' => 'getBlockCode',
'effective_date' => 'getEffectiveDate',
'expire_date' => 'getExpireDate',
'rate_plan_code' => 'getRatePlanCode',
'market' => 'getMarket',
'source_code' => 'getSourceCode',
'channel_code' => 'getChannelCode',
'inventory_blocks' => 'getInventoryBlocks',
'notes' => 'getNotes',
'catering_block' => 'getCateringBlock',
'booking_status' => 'getBookingStatus',
'profiles' => 'getProfiles',
'owner' => 'getOwner',
'packages' => 'getPackages',
'block_type' => 'getBlockType',
'reservation_type' => 'getReservationType',
'booking_method' => 'getBookingMethod',
'repository_record_created' => 'getRepositoryRecordCreated',
'repository_record_updated' => 'getRepositoryRecordUpdated'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['resort_allotment_id'] = isset($data['resort_allotment_id']) ? $data['resort_allotment_id'] : null;
        $this->container['hotel'] = isset($data['hotel']) ? $data['hotel'] : null;
        $this->container['block_status'] = isset($data['block_status']) ? $data['block_status'] : null;
        $this->container['block_name'] = isset($data['block_name']) ? $data['block_name'] : null;
        $this->container['block_code'] = isset($data['block_code']) ? $data['block_code'] : null;
        $this->container['effective_date'] = isset($data['effective_date']) ? $data['effective_date'] : null;
        $this->container['expire_date'] = isset($data['expire_date']) ? $data['expire_date'] : null;
        $this->container['rate_plan_code'] = isset($data['rate_plan_code']) ? $data['rate_plan_code'] : null;
        $this->container['market'] = isset($data['market']) ? $data['market'] : null;
        $this->container['source_code'] = isset($data['source_code']) ? $data['source_code'] : null;
        $this->container['channel_code'] = isset($data['channel_code']) ? $data['channel_code'] : null;
        $this->container['inventory_blocks'] = isset($data['inventory_blocks']) ? $data['inventory_blocks'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['catering_block'] = isset($data['catering_block']) ? $data['catering_block'] : null;
        $this->container['booking_status'] = isset($data['booking_status']) ? $data['booking_status'] : null;
        $this->container['profiles'] = isset($data['profiles']) ? $data['profiles'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['packages'] = isset($data['packages']) ? $data['packages'] : null;
        $this->container['block_type'] = isset($data['block_type']) ? $data['block_type'] : null;
        $this->container['reservation_type'] = isset($data['reservation_type']) ? $data['reservation_type'] : null;
        $this->container['booking_method'] = isset($data['booking_method']) ? $data['booking_method'] : null;
        $this->container['repository_record_created'] = isset($data['repository_record_created']) ? $data['repository_record_created'] : null;
        $this->container['repository_record_updated'] = isset($data['repository_record_updated']) ? $data['repository_record_updated'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets resort_allotment_id
     *
     * @return string
     */
    public function getResortAllotmentId()
    {
        return $this->container['resort_allotment_id'];
    }

    /**
     * Sets resort_allotment_id
     *
     * @param string $resort_allotment_id resort_allotment_id
     *
     * @return $this
     */
    public function setResortAllotmentId($resort_allotment_id)
    {
        $this->container['resort_allotment_id'] = $resort_allotment_id;

        return $this;
    }

    /**
     * Gets hotel
     *
     * @return \Hapi\Model\HotelDto
     */
    public function getHotel()
    {
        return $this->container['hotel'];
    }

    /**
     * Sets hotel
     *
     * @param \Hapi\Model\HotelDto $hotel hotel
     *
     * @return $this
     */
    public function setHotel($hotel)
    {
        $this->container['hotel'] = $hotel;

        return $this;
    }

    /**
     * Gets block_status
     *
     * @return string
     */
    public function getBlockStatus()
    {
        return $this->container['block_status'];
    }

    /**
     * Sets block_status
     *
     * @param string $block_status Block status
     *
     * @return $this
     */
    public function setBlockStatus($block_status)
    {
        $this->container['block_status'] = $block_status;

        return $this;
    }

    /**
     * Gets block_name
     *
     * @return string
     */
    public function getBlockName()
    {
        return $this->container['block_name'];
    }

    /**
     * Sets block_name
     *
     * @param string $block_name Block name
     *
     * @return $this
     */
    public function setBlockName($block_name)
    {
        $this->container['block_name'] = $block_name;

        return $this;
    }

    /**
     * Gets block_code
     *
     * @return string
     */
    public function getBlockCode()
    {
        return $this->container['block_code'];
    }

    /**
     * Sets block_code
     *
     * @param string $block_code Block code
     *
     * @return $this
     */
    public function setBlockCode($block_code)
    {
        $this->container['block_code'] = $block_code;

        return $this;
    }

    /**
     * Gets effective_date
     *
     * @return string
     */
    public function getEffectiveDate()
    {
        return $this->container['effective_date'];
    }

    /**
     * Sets effective_date
     *
     * @param string $effective_date Start date of allotment in repository, in YYYY-MM-DDThh:mm:ss.sss format
     *
     * @return $this
     */
    public function setEffectiveDate($effective_date)
    {
        $this->container['effective_date'] = $effective_date;

        return $this;
    }

    /**
     * Gets expire_date
     *
     * @return string
     */
    public function getExpireDate()
    {
        return $this->container['expire_date'];
    }

    /**
     * Sets expire_date
     *
     * @param string $expire_date End date of allotment in repository, in YYYY-MM-DDThh:mm:ss.sss format
     *
     * @return $this
     */
    public function setExpireDate($expire_date)
    {
        $this->container['expire_date'] = $expire_date;

        return $this;
    }

    /**
     * Gets rate_plan_code
     *
     * @return string
     */
    public function getRatePlanCode()
    {
        return $this->container['rate_plan_code'];
    }

    /**
     * Sets rate_plan_code
     *
     * @param string $rate_plan_code Rate plan code
     *
     * @return $this
     */
    public function setRatePlanCode($rate_plan_code)
    {
        $this->container['rate_plan_code'] = $rate_plan_code;

        return $this;
    }

    /**
     * Gets market
     *
     * @return \Hapi\Model\MarketDto
     */
    public function getMarket()
    {
        return $this->container['market'];
    }

    /**
     * Sets market
     *
     * @param \Hapi\Model\MarketDto $market market
     *
     * @return $this
     */
    public function setMarket($market)
    {
        $this->container['market'] = $market;

        return $this;
    }

    /**
     * Gets source_code
     *
     * @return string
     */
    public function getSourceCode()
    {
        return $this->container['source_code'];
    }

    /**
     * Sets source_code
     *
     * @param string $source_code Source code
     *
     * @return $this
     */
    public function setSourceCode($source_code)
    {
        $this->container['source_code'] = $source_code;

        return $this;
    }

    /**
     * Gets channel_code
     *
     * @return string
     */
    public function getChannelCode()
    {
        return $this->container['channel_code'];
    }

    /**
     * Sets channel_code
     *
     * @param string $channel_code Channel code
     *
     * @return $this
     */
    public function setChannelCode($channel_code)
    {
        $this->container['channel_code'] = $channel_code;

        return $this;
    }

    /**
     * Gets inventory_blocks
     *
     * @return \Hapi\Model\InventoryBlockDto[]
     */
    public function getInventoryBlocks()
    {
        return $this->container['inventory_blocks'];
    }

    /**
     * Sets inventory_blocks
     *
     * @param \Hapi\Model\InventoryBlockDto[] $inventory_blocks Set of inventory blocks.
     *
     * @return $this
     */
    public function setInventoryBlocks($inventory_blocks)
    {
        $this->container['inventory_blocks'] = $inventory_blocks;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return \Hapi\Model\CommentDto[]
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param \Hapi\Model\CommentDto[] $notes Set of allotment notes
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets catering_block
     *
     * @return string
     */
    public function getCateringBlock()
    {
        return $this->container['catering_block'];
    }

    /**
     * Sets catering_block
     *
     * @param string $catering_block Is this a sales/catering block
     *
     * @return $this
     */
    public function setCateringBlock($catering_block)
    {
        $this->container['catering_block'] = $catering_block;

        return $this;
    }

    /**
     * Gets booking_status
     *
     * @return string
     */
    public function getBookingStatus()
    {
        return $this->container['booking_status'];
    }

    /**
     * Sets booking_status
     *
     * @param string $booking_status Block booking status
     *
     * @return $this
     */
    public function setBookingStatus($booking_status)
    {
        $this->container['booking_status'] = $booking_status;

        return $this;
    }

    /**
     * Gets profiles
     *
     * @return \Hapi\Model\ProfileReferenceDto[]
     */
    public function getProfiles()
    {
        return $this->container['profiles'];
    }

    /**
     * Sets profiles
     *
     * @param \Hapi\Model\ProfileReferenceDto[] $profiles Set of related profile references
     *
     * @return $this
     */
    public function setProfiles($profiles)
    {
        $this->container['profiles'] = $profiles;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return string
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param string $owner Block owner
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets packages
     *
     * @return string[]
     */
    public function getPackages()
    {
        return $this->container['packages'];
    }

    /**
     * Sets packages
     *
     * @param string[] $packages Block package codes
     *
     * @return $this
     */
    public function setPackages($packages)
    {
        $this->container['packages'] = $packages;

        return $this;
    }

    /**
     * Gets block_type
     *
     * @return string
     */
    public function getBlockType()
    {
        return $this->container['block_type'];
    }

    /**
     * Sets block_type
     *
     * @param string $block_type Block type
     *
     * @return $this
     */
    public function setBlockType($block_type)
    {
        $this->container['block_type'] = $block_type;

        return $this;
    }

    /**
     * Gets reservation_type
     *
     * @return string
     */
    public function getReservationType()
    {
        return $this->container['reservation_type'];
    }

    /**
     * Sets reservation_type
     *
     * @param string $reservation_type Block reservation type
     *
     * @return $this
     */
    public function setReservationType($reservation_type)
    {
        $this->container['reservation_type'] = $reservation_type;

        return $this;
    }

    /**
     * Gets booking_method
     *
     * @return string
     */
    public function getBookingMethod()
    {
        return $this->container['booking_method'];
    }

    /**
     * Sets booking_method
     *
     * @param string $booking_method Method in which the block was booked
     *
     * @return $this
     */
    public function setBookingMethod($booking_method)
    {
        $this->container['booking_method'] = $booking_method;

        return $this;
    }

    /**
     * Gets repository_record_created
     *
     * @return \DateTime
     */
    public function getRepositoryRecordCreated()
    {
        return $this->container['repository_record_created'];
    }

    /**
     * Sets repository_record_created
     *
     * @param \DateTime $repository_record_created Record create date in repository, in YYYY-MM-DDThh:mm:ss.sss format
     *
     * @return $this
     */
    public function setRepositoryRecordCreated($repository_record_created)
    {
        $this->container['repository_record_created'] = $repository_record_created;

        return $this;
    }

    /**
     * Gets repository_record_updated
     *
     * @return \DateTime
     */
    public function getRepositoryRecordUpdated()
    {
        return $this->container['repository_record_updated'];
    }

    /**
     * Sets repository_record_updated
     *
     * @param \DateTime $repository_record_updated Record update date in repository, in YYYY-MM-DDThh:mm:ss.sss format
     *
     * @return $this
     */
    public function setRepositoryRecordUpdated($repository_record_updated)
    {
        $this->container['repository_record_updated'] = $repository_record_updated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
