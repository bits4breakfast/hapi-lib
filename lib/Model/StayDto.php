<?php
/**
 * StayDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Hapi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
* HAPI data model
 *
* No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
* OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.4
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Hapi\Model;

use \ArrayAccess;
use \Hapi\ObjectSerializer;

/**
 * StayDto Class Doc Comment
 *
 * @category Class
 * @package  Hapi
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StayDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StayDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'hotel' => '\Hapi\Model\HotelDto',
'reservation_number' => 'string',
'profile_id' => '\Hapi\Model\ProfileDto',
'room_stays' => '\Hapi\Model\RoomStayDto',
'repository_record_created' => '\DateTime',
'repository_record_updated' => '\DateTime'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'hotel' => null,
'reservation_number' => null,
'profile_id' => null,
'room_stays' => null,
'repository_record_created' => 'date-time',
'repository_record_updated' => 'date-time'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'hotel' => 'hotel',
'reservation_number' => 'reservationNumber',
'profile_id' => 'profileId',
'room_stays' => 'roomStays',
'repository_record_created' => 'repositoryRecordCreated',
'repository_record_updated' => 'repositoryRecordUpdated'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'hotel' => 'setHotel',
'reservation_number' => 'setReservationNumber',
'profile_id' => 'setProfileId',
'room_stays' => 'setRoomStays',
'repository_record_created' => 'setRepositoryRecordCreated',
'repository_record_updated' => 'setRepositoryRecordUpdated'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'hotel' => 'getHotel',
'reservation_number' => 'getReservationNumber',
'profile_id' => 'getProfileId',
'room_stays' => 'getRoomStays',
'repository_record_created' => 'getRepositoryRecordCreated',
'repository_record_updated' => 'getRepositoryRecordUpdated'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['hotel'] = isset($data['hotel']) ? $data['hotel'] : null;
        $this->container['reservation_number'] = isset($data['reservation_number']) ? $data['reservation_number'] : null;
        $this->container['profile_id'] = isset($data['profile_id']) ? $data['profile_id'] : null;
        $this->container['room_stays'] = isset($data['room_stays']) ? $data['room_stays'] : null;
        $this->container['repository_record_created'] = isset($data['repository_record_created']) ? $data['repository_record_created'] : null;
        $this->container['repository_record_updated'] = isset($data['repository_record_updated']) ? $data['repository_record_updated'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets hotel
     *
     * @return \Hapi\Model\HotelDto
     */
    public function getHotel()
    {
        return $this->container['hotel'];
    }

    /**
     * Sets hotel
     *
     * @param \Hapi\Model\HotelDto $hotel hotel
     *
     * @return $this
     */
    public function setHotel($hotel)
    {
        $this->container['hotel'] = $hotel;

        return $this;
    }

    /**
     * Gets reservation_number
     *
     * @return string
     */
    public function getReservationNumber()
    {
        return $this->container['reservation_number'];
    }

    /**
     * Sets reservation_number
     *
     * @param string $reservation_number reservation_number
     *
     * @return $this
     */
    public function setReservationNumber($reservation_number)
    {
        $this->container['reservation_number'] = $reservation_number;

        return $this;
    }

    /**
     * Gets profile_id
     *
     * @return \Hapi\Model\ProfileDto
     */
    public function getProfileId()
    {
        return $this->container['profile_id'];
    }

    /**
     * Sets profile_id
     *
     * @param \Hapi\Model\ProfileDto $profile_id profile_id
     *
     * @return $this
     */
    public function setProfileId($profile_id)
    {
        $this->container['profile_id'] = $profile_id;

        return $this;
    }

    /**
     * Gets room_stays
     *
     * @return \Hapi\Model\RoomStayDto
     */
    public function getRoomStays()
    {
        return $this->container['room_stays'];
    }

    /**
     * Sets room_stays
     *
     * @param \Hapi\Model\RoomStayDto $room_stays room_stays
     *
     * @return $this
     */
    public function setRoomStays($room_stays)
    {
        $this->container['room_stays'] = $room_stays;

        return $this;
    }

    /**
     * Gets repository_record_created
     *
     * @return \DateTime
     */
    public function getRepositoryRecordCreated()
    {
        return $this->container['repository_record_created'];
    }

    /**
     * Sets repository_record_created
     *
     * @param \DateTime $repository_record_created Record create date in repository, in YYYY-MM-DDThh:mm:ss.sss format
     *
     * @return $this
     */
    public function setRepositoryRecordCreated($repository_record_created)
    {
        $this->container['repository_record_created'] = $repository_record_created;

        return $this;
    }

    /**
     * Gets repository_record_updated
     *
     * @return \DateTime
     */
    public function getRepositoryRecordUpdated()
    {
        return $this->container['repository_record_updated'];
    }

    /**
     * Sets repository_record_updated
     *
     * @param \DateTime $repository_record_updated Record update date in repository, in YYYY-MM-DDThh:mm:ss.sss format
     *
     * @return $this
     */
    public function setRepositoryRecordUpdated($repository_record_updated)
    {
        $this->container['repository_record_updated'] = $repository_record_updated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
