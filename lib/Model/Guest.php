<?php
/**
 * Guest
 *
 * PHP version 5
 *
 * @category Class
 * @package  HapiPush
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Streaming Flow Webservice
 *
 * - sample API definition for a vendor webservice that receives data from a Hapi Streaming Flow - definition provided as an example only
 *
 * The version of the OpenAPI document: 1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.1.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace HapiPush\Model;

use \ArrayAccess;
use \HapiPush\ObjectSerializer;

/**
 * Guest Class Doc Comment
 *
 * @category Class
 * @description profile info for guest(s)
 * @package  HapiPush
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Guest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Guest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'profile' => '\HapiPush\Model\Profile',
        'is_primary' => 'bool',
        'arrival_transport' => '\HapiPush\Model\TransportationInfo',
        'departure_transport' => '\HapiPush\Model\TransportationInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'profile' => null,
        'is_primary' => null,
        'arrival_transport' => null,
        'departure_transport' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'profile' => 'profile',
        'is_primary' => 'IsPrimary',
        'arrival_transport' => 'arrivalTransport',
        'departure_transport' => 'departureTransport'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'profile' => 'setProfile',
        'is_primary' => 'setIsPrimary',
        'arrival_transport' => 'setArrivalTransport',
        'departure_transport' => 'setDepartureTransport'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'profile' => 'getProfile',
        'is_primary' => 'getIsPrimary',
        'arrival_transport' => 'getArrivalTransport',
        'departure_transport' => 'getDepartureTransport'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['profile'] = isset($data['profile']) ? $data['profile'] : null;
        $this->container['is_primary'] = isset($data['is_primary']) ? $data['is_primary'] : null;
        $this->container['arrival_transport'] = isset($data['arrival_transport']) ? $data['arrival_transport'] : null;
        $this->container['departure_transport'] = isset($data['departure_transport']) ? $data['departure_transport'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets profile
     *
     * @return \HapiPush\Model\Profile|null
     */
    public function getProfile()
    {
        return $this->container['profile'];
    }

    /**
     * Sets profile
     *
     * @param \HapiPush\Model\Profile|null $profile profile
     *
     * @return $this
     */
    public function setProfile($profile)
    {
        $this->container['profile'] = $profile;

        return $this;
    }

    /**
     * Gets is_primary
     *
     * @return bool|null
     */
    public function getIsPrimary()
    {
        return $this->container['is_primary'];
    }

    /**
     * Sets is_primary
     *
     * @param bool|null $is_primary designates if primary guest on reservation
     *
     * @return $this
     */
    public function setIsPrimary($is_primary)
    {
        $this->container['is_primary'] = $is_primary;

        return $this;
    }

    /**
     * Gets arrival_transport
     *
     * @return \HapiPush\Model\TransportationInfo|null
     */
    public function getArrivalTransport()
    {
        return $this->container['arrival_transport'];
    }

    /**
     * Sets arrival_transport
     *
     * @param \HapiPush\Model\TransportationInfo|null $arrival_transport arrival_transport
     *
     * @return $this
     */
    public function setArrivalTransport($arrival_transport)
    {
        $this->container['arrival_transport'] = $arrival_transport;

        return $this;
    }

    /**
     * Gets departure_transport
     *
     * @return \HapiPush\Model\TransportationInfo|null
     */
    public function getDepartureTransport()
    {
        return $this->container['departure_transport'];
    }

    /**
     * Sets departure_transport
     *
     * @param \HapiPush\Model\TransportationInfo|null $departure_transport departure_transport
     *
     * @return $this
     */
    public function setDepartureTransport($departure_transport)
    {
        $this->container['departure_transport'] = $departure_transport;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


